global
    log 127.0.0.1:514 local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor except 127.0.0.0/8
    option redispatch
    retries 3
    timeout http-request 10s
    timeout queue 20s
    timeout connect 10s
    timeout client 1m
    timeout server 1m
    timeout http-keep-alive 10s
    timeout check 10s
    maxconn 3000

# HAProxy Stats
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 5s
    stats admin if TRUE

# K3s API Server Load Balancer
frontend k3s-api-frontend
    bind *:6443
    mode tcp
    option tcplog
    default_backend k3s-api-backend

backend k3s-api-backend
    mode tcp
    balance roundrobin
    option tcp-check
{% for host in groups['k3s_master'] %}
    server {{ hostvars[host]['inventory_hostname'] }} {{ hostvars[host]['ansible_host'] }}:6443 check
{% endfor %}

# HTTP Services Load Balancer
frontend http-frontend
    bind *:80
    mode http

    # Define ACLs for different services
    acl is_librechat hdr_beg(host) -i librechat
    acl is_ollama hdr_beg(host) -i ollama
    acl is_mcp path_beg /mcp
    acl is_dashboard hdr_beg(host) -i dashboard

    # Route to appropriate backends
    use_backend librechat-backend if is_librechat
    use_backend ollama-backend if is_ollama
    use_backend mcp-backend if is_mcp
    use_backend dashboard-backend if is_dashboard
    default_backend k3s-ingress-backend

# HTTPS Services Load Balancer
frontend https-frontend
    bind *:443
    mode tcp
    option tcplog
    default_backend k3s-ingress-https-backend

# K3s Ingress Controller Backend (HTTP)
backend k3s-ingress-backend
    mode http
    balance roundrobin
    option httpchk GET /healthz
{% for host in groups['k3s_workers'] %}
    server {{ hostvars[host]['inventory_hostname'] }} {{ hostvars[host]['ansible_host'] }}:30080 check
{% endfor %}

# K3s Ingress Controller Backend (HTTPS)
backend k3s-ingress-https-backend
    mode tcp
    balance roundrobin
    option tcp-check
{% for host in groups['k3s_workers'] %}
    server {{ hostvars[host]['inventory_hostname'] }} {{ hostvars[host]['ansible_host'] }}:30443 check
{% endfor %}

# LibreChat Backend
backend librechat-backend
    mode http
    balance roundrobin
    option httpchk GET /health
{% for host in groups['k3s_workers'] %}
    server {{ hostvars[host]['inventory_hostname'] }}-librechat {{ hostvars[host]['ansible_host'] }}:30080 check
{% endfor %}

# Ollama Backend
backend ollama-backend
    mode http
    balance roundrobin
    option httpchk GET /health
{% for host in groups['k3s_workers'] %}
    server {{ hostvars[host]['inventory_hostname'] }}-ollama {{ hostvars[host]['ansible_host'] }}:30080 check
{% endfor %}

# MCP Servers Backend
backend mcp-backend
    mode http
    balance roundrobin
    option httpchk GET /health
{% for host in groups['k3s_workers'] %}
    server {{ hostvars[host]['inventory_hostname'] }}-mcp {{ hostvars[host]['ansible_host'] }}:30080 check
{% endfor %}

# Kubernetes Dashboard Backend
backend dashboard-backend
    mode http
    balance roundrobin
    option httpchk GET /
{% for host in groups['k3s_workers'] %}
    server {{ hostvars[host]['inventory_hostname'] }}-dashboard {{ hostvars[host]['ansible_host'] }}:30080 check
{% endfor %}
