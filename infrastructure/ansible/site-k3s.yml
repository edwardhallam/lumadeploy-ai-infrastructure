---
# K3s Cluster Setup Playbook
- name: Prepare all nodes for K3s
  hosts: all
  become: true
  gather_facts: true

  vars:
    ansible_python_interpreter: /usr/bin/python3
    k3s_version: "{{ k3s_version | default('v1.28.5+k3s1') }}"
    k3s_token: "{{ k3s_token }}"
    k3s_server_ip: "{{ hostvars[groups['k3s_master'][0]]['ansible_host'] }}"

  pre_tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install essential packages
      apt:
        name:
          - curl
          - wget
          - git
          - vim
          - htop
          - net-tools
          - ufw
          - open-iscsi
          - nfs-common
        state: present

    - name: Configure firewall for K3s
      ufw:
        state: enabled
        policy: deny
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - '22'     # SSH
        - '6443'   # K3s API
        - '2379'   # etcd client
        - '2380'   # etcd peer
        - '10250'  # kubelet
        - '10251'  # kube-scheduler
        - '10252'  # kube-controller-manager

    - name: Allow K3s UDP ports
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: udp
      loop:
        - '8472'   # flannel VXLAN

    - name: Disable swap
      shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

    - name: Load required kernel modules
      modprobe:
        name: "{{ item }}"
      loop:
        - br_netfilter
        - overlay

    - name: Make kernel modules persistent
      lineinfile:
        path: /etc/modules-load.d/k3s.conf
        line: "{{ item }}"
        create: yes
      loop:
        - br_netfilter
        - overlay

    - name: Configure sysctl for K3s
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
        sysctl_file: /etc/sysctl.d/k3s.conf
      loop:
        - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { key: 'net.ipv4.ip_forward', value: '1' }

# Install K3s Master/Control Plane
- name: Install K3s master
  hosts: k3s_master
  become: true

  vars:
    k3s_cluster_cidr: "{{ k3s_cluster_cidr | default('10.42.0.0/16') }}"
    k3s_service_cidr: "{{ k3s_service_cidr | default('10.43.0.0/16') }}"

  tasks:
    - name: Download K3s installation script
      get_url:
        url: https://get.k3s.io
        dest: /tmp/k3s-install.sh
        mode: '0755'

    - name: Install K3s server
      shell: |
        INSTALL_K3S_VERSION="{{ k3s_version }}" \
        K3S_TOKEN="{{ k3s_token }}" \
        K3S_CLUSTER_CIDR="{{ k3s_cluster_cidr }}" \
        K3S_SERVICE_CIDR="{{ k3s_service_cidr }}" \
        /tmp/k3s-install.sh server \
          --disable traefik \
          --disable servicelb \
          --disable local-storage \
          --write-kubeconfig-mode 644
      args:
        creates: /usr/local/bin/k3s

    - name: Wait for K3s to be ready
      wait_for:
        port: 6443
        host: "{{ ansible_host }}"
        timeout: 300

    - name: Create .kube directory
      file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Copy kubeconfig to user directory
      copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: /home/{{ ansible_user }}/.kube/config
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
        remote_src: yes

    - name: Update kubeconfig server address
      replace:
        path: /home/{{ ansible_user }}/.kube/config
        regexp: 'https://127.0.0.1:6443'
        replace: 'https://{{ ansible_host }}:6443'

# Install K3s Workers
- name: Install K3s workers
  hosts: k3s_workers
  become: true

  tasks:
    - name: Download K3s installation script
      get_url:
        url: https://get.k3s.io
        dest: /tmp/k3s-install.sh
        mode: '0755'

    - name: Install K3s agent
      shell: |
        INSTALL_K3S_VERSION="{{ k3s_version }}" \
        K3S_URL="https://{{ k3s_server_ip }}:6443" \
        K3S_TOKEN="{{ k3s_token }}" \
        /tmp/k3s-install.sh agent
      args:
        creates: /usr/local/bin/k3s

    - name: Wait for K3s agent to be ready
      wait_for:
        port: 10250
        host: "{{ ansible_host }}"
        timeout: 300

# Configure Load Balancer
- name: Configure load balancer
  hosts: k3s_loadbalancer
  become: true

  tasks:
    - name: Install HAProxy
      apt:
        name: haproxy
        state: present

    - name: Configure HAProxy for K3s
      template:
        src: haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
        backup: yes
      notify: restart haproxy

    - name: Start and enable HAProxy
      systemd:
        name: haproxy
        state: started
        enabled: yes

  handlers:
    - name: restart haproxy
      systemd:
        name: haproxy
        state: restarted

# Install essential K3s addons
- name: Install K3s addons
  hosts: k3s_master
  become: false

  tasks:
    - name: Install Helm
      shell: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      args:
        creates: /usr/local/bin/helm

    - name: Add Helm repositories
      kubernetes.core.helm_repository:
        name: "{{ item.name }}"
        repo_url: "{{ item.url }}"
      loop:
        - { name: 'ingress-nginx', url: 'https://kubernetes.github.io/ingress-nginx' }
        - { name: 'prometheus-community', url: 'https://prometheus-community.github.io/helm-charts' }
        - { name: 'jetstack', url: 'https://charts.jetstack.io' }

    - name: Install NGINX Ingress Controller
      kubernetes.core.helm:
        name: ingress-nginx
        chart_ref: ingress-nginx/ingress-nginx
        release_namespace: ingress-nginx
        create_namespace: yes
        values:
          controller:
            service:
              type: NodePort
              nodePorts:
                http: 30080
                https: 30443

    - name: Install cert-manager
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        release_namespace: cert-manager
        create_namespace: yes
        values:
          installCRDs: true

    - name: Install Longhorn storage
      kubernetes.core.helm:
        name: longhorn
        chart_ref: https://charts.longhorn.io/longhorn-1.5.3.tgz
        release_namespace: longhorn-system
        create_namespace: yes

    - name: Wait for ingress controller to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: ingress-nginx-controller
        namespace: ingress-nginx
        wait: true
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 600
