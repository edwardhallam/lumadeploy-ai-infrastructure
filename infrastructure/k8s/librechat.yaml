---
# LibreChat Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: librechat
  namespace: ai-infrastructure
  labels:
    app: librechat
    component: ai-infrastructure
spec:
  replicas: 1
  selector:
    matchLabels:
      app: librechat
  template:
    metadata:
      labels:
        app: librechat
        component: ai-infrastructure
    spec:
      containers:
      - name: librechat
        image: ghcr.io/danny-avila/librechat:latest
        ports:
        - containerPort: 3080
          name: http
        env:
        - name: HOST
          value: "0.0.0.0"
        - name: PORT
          value: "3080"
        - name: MONGO_URI
          value: "mongodb://mongodb.ai-infrastructure.svc.cluster.local:27017/LibreChat"
        - name: DOMAIN_CLIENT
          value: "http://librechat.local"
        - name: DOMAIN_SERVER
          value: "http://librechat.local"
        - name: OLLAMA_BASE_URL
          value: "http://ollama.ai-infrastructure.svc.cluster.local"
        - name: DEBUG_LOGGING
          value: "true"
        - name: DEBUG_CONSOLE
          value: "false"
        - name: SEARCH
          value: "true"
        - name: MEILI_HOST
          value: "http://meilisearch.ai-infrastructure.svc.cluster.local:7700"
        - name: MEILI_HTTP_ADDR
          value: "meilisearch.ai-infrastructure.svc.cluster.local:7700"
        resources:
          requests:
            cpu: 1000m
            memory: 2Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /
            port: 3080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: librechat-data
          mountPath: /app/client/public/images
        - name: librechat-logs
          mountPath: /app/logs
      volumes:
      - name: librechat-data
        persistentVolumeClaim:
          claimName: librechat-data
      - name: librechat-logs
        persistentVolumeClaim:
          claimName: librechat-logs
      restartPolicy: Always
---
# LibreChat Service
apiVersion: v1
kind: Service
metadata:
  name: librechat
  namespace: ai-infrastructure
  labels:
    app: librechat
spec:
  selector:
    app: librechat
  ports:
  - name: http
    port: 80
    targetPort: 3080
    protocol: TCP
  type: ClusterIP
---
# LibreChat Data PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: librechat-data
  namespace: ai-infrastructure
  labels:
    app: librechat
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: longhorn
---
# LibreChat Logs PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: librechat-logs
  namespace: ai-infrastructure
  labels:
    app: librechat
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn
---
# MongoDB for LibreChat
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: ai-infrastructure
  labels:
    app: mongodb
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
        component: database
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        ports:
        - containerPort: 27017
          name: mongodb
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "admin"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: password
        - name: MONGO_INITDB_DATABASE
          value: "LibreChat"
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1000m
            memory: 2Gi
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: mongodb-data
---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: ai-infrastructure
  labels:
    app: mongodb
spec:
  selector:
    app: mongodb
  ports:
  - name: mongodb
    port: 27017
    targetPort: 27017
    protocol: TCP
  type: ClusterIP
---
# MongoDB PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-data
  namespace: ai-infrastructure
  labels:
    app: mongodb
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: longhorn
---
# MongoDB Secret
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
  namespace: ai-infrastructure
  labels:
    app: mongodb
type: Opaque
data:
  password: bGlicmVjaGF0MTIz  # librechat123 base64 encoded
---
# MeiliSearch for LibreChat
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meilisearch
  namespace: ai-infrastructure
  labels:
    app: meilisearch
    component: search
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meilisearch
  template:
    metadata:
      labels:
        app: meilisearch
        component: search
    spec:
      containers:
      - name: meilisearch
        image: getmeili/meilisearch:latest
        ports:
        - containerPort: 7700
          name: http
        env:
        - name: MEILI_ENV
          value: "production"
        - name: MEILI_NO_ANALYTICS
          value: "true"
        - name: MEILI_HTTP_ADDR
          value: "0.0.0.0:7700"
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1000m
            memory: 2Gi
        volumeMounts:
        - name: meilisearch-data
          mountPath: /meili_data
        livenessProbe:
          httpGet:
            path: /health
            port: 7700
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 7700
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: meilisearch-data
        persistentVolumeClaim:
          claimName: meilisearch-data
---
# MeiliSearch Service
apiVersion: v1
kind: Service
metadata:
  name: meilisearch
  namespace: ai-infrastructure
  labels:
    app: meilisearch
spec:
  selector:
    app: meilisearch
  ports:
  - name: http
    port: 7700
    targetPort: 7700
    protocol: TCP
  type: ClusterIP
---
# MeiliSearch PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: meilisearch-data
  namespace: ai-infrastructure
  labels:
    app: meilisearch
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: longhorn
---
# LibreChat Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: librechat
  namespace: ai-infrastructure
  labels:
    app: librechat
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/client-max-body-size: "100m"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /librechat(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: librechat
            port:
              number: 80
