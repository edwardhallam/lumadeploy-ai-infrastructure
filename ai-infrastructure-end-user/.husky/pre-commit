#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîê Running security checks before commit...${NC}"

# Check if git-secrets is installed
GIT_SECRETS_PATH=$(command -v git-secrets)
if [ -z "$GIT_SECRETS_PATH" ]; then
    echo -e "${RED}‚ùå git-secrets is not installed.${NC}"
    echo -e "${YELLOW}Please run the setup script or install git-secrets manually:${NC}"
    echo -e "  macOS: ${GREEN}brew install git-secrets${NC}"
    echo -e "  Linux: ${GREEN}git clone https://github.com/awslabs/git-secrets.git && cd git-secrets && make install${NC}"
    echo -e "  Or run: ${GREEN}./setup.sh${NC} (includes security setup)"
    exit 1
fi

echo -e "${GREEN}‚úÖ git-secrets found${NC}"

# Initialize git-secrets configuration for AWS
echo -e "${BLUE}üîß Initializing git-secrets...${NC}"
git-secrets --register-aws > /dev/null 2>&1

# Custom REGEX patterns for end-user infrastructure secrets
patterns=(
    # Proxmox API Tokens
    "root@pam![a-zA-Z0-9_-]+=[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"
    
    # Generic secrets
    "['\"]?[Aa]pi_?[Kk]ey['\"]?\s*[:=]\s*['\"][a-zA-Z0-9_-]{20,}['\"]"
    "['\"]?[Ss]ecret['\"]?\s*[:=]\s*['\"][a-zA-Z0-9_-]{20,}['\"]"
    "['\"]?[Tt]oken['\"]?\s*[:=]\s*['\"][a-zA-Z0-9_-]{20,}['\"]"
    "['\"]?[Pp]assword['\"]?\s*[:=]\s*['\"][^'\"\\s]{8,}['\"]"
    
    # SSH Keys
    "(-){5}\\s*(BEGIN\\s(RSA\\s)?PRIVATE\\sKEY)\\s*(-){5}"
    "(-){5}\\s*(BEGIN\\sOPENSSH\\sPRIVATE\\sKEY)\\s*(-){5}"
    
    # Cloud provider keys
    "AKIA[0-9A-Z]{16}"
    "sk_live_[0-9a-zA-Z]{99}"
    "sk_test_[0-9a-zA-Z]{99}"
    
    # Environment variables with secrets
    "export\\s+[A-Z_]*[Ss][Ee][Cc][Rr][Ee][Tt][A-Z_]*\\s*=\\s*['\"]?[a-zA-Z0-9_-]{20,}['\"]?"
    "export\\s+[A-Z_]*[Kk][Ee][Yy][A-Z_]*\\s*=\\s*['\"]?[a-zA-Z0-9_-]{20,}['\"]?"
    "export\\s+[A-Z_]*[Tt][Oo][Kk][Ee][Nn][A-Z_]*\\s*=\\s*['\"]?[a-zA-Z0-9_-]{20,}['\"]?"
)

# Log file
log_file=".git-secrets.log"

# Add patterns
for pattern in "${patterns[@]}"; do
    existing_patterns=$(git secrets --list 2>>"$log_file")
    if ! echo "$existing_patterns" | grep -Fqe "$pattern"; then
        git secrets --add "$pattern" 2>>"$log_file"
    fi
done

# Add allowed patterns (whitelist)
git secrets --add --allowed "your-proxmox-host" 2>>"$log_file"
git secrets --add --allowed "your_proxmox_ip_here" 2>>"$log_file"
git secrets --add --allowed "your-api-token-here" 2>>"$log_file"
git secrets --add --allowed "example.com" 2>>"$log_file"
git secrets --add --allowed "localhost" 2>>"$log_file"
git secrets --add --allowed "127.0.0.1" 2>>"$log_file"

echo -e "${BLUE}üîç Scanning for secrets...${NC}"

# Run git-secrets scan
if git-secrets --scan -r; then
    echo -e "${GREEN}‚úÖ No secrets detected${NC}"
else
    echo -e "${RED}‚ùå SECURITY ALERT: Potential secrets detected!${NC}"
    echo -e "${YELLOW}Please review and remove any sensitive data before committing.${NC}"
    exit 1
fi

echo -e "${GREEN}üéâ Security checks passed!${NC}"

# Run tests if they exist
if [ -f "package.json" ] && command -v npm &> /dev/null; then
    npm test
elif [ -f "requirements.txt" ] && command -v python &> /dev/null; then
    echo -e "${BLUE}üß™ Running Python validation...${NC}"
    python -m py_compile main.py 2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è  Python validation skipped${NC}"
fi
