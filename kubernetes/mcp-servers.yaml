---
# MCP Server Deployment Template
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-server-1
  namespace: mcp-servers
  labels:
    app: mcp-server
    instance: mcp-server-1
    component: ai-infrastructure
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mcp-server
      instance: mcp-server-1
  template:
    metadata:
      labels:
        app: mcp-server
        instance: mcp-server-1
        component: ai-infrastructure
    spec:
      containers:
      - name: mcp-server
        image: node:18-alpine
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: MCP_SERVER_PORT
          value: "3000"
        - name: MCP_SERVER_NAME
          value: "mcp-server-1"
        - name: LOG_LEVEL
          value: "info"
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1024Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: mcp-config
          mountPath: /app/config
          readOnly: true
        - name: mcp-data
          mountPath: /app/data
      volumes:
      - name: mcp-config
        configMap:
          name: mcp-server-1-config
      - name: mcp-data
        persistentVolumeClaim:
          claimName: mcp-server-1-data
      restartPolicy: Always
---
# MCP Server Service
apiVersion: v1
kind: Service
metadata:
  name: mcp-server-1
  namespace: mcp-servers
  labels:
    app: mcp-server
    instance: mcp-server-1
spec:
  selector:
    app: mcp-server
    instance: mcp-server-1
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  type: ClusterIP
---
# MCP Server ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-server-1-config
  namespace: mcp-servers
  labels:
    app: mcp-server
    instance: mcp-server-1
data:
  config.json: |
    {
      "server": {
        "name": "mcp-server-1",
        "version": "1.0.0",
        "port": 3000
      },
      "mcp": {
        "protocol_version": "2024-11-05",
        "capabilities": {
          "logging": {},
          "prompts": {},
          "resources": {},
          "tools": {}
        }
      },
      "logging": {
        "level": "info",
        "format": "json"
      }
    }
  package.json: |
    {
      "name": "mcp-server-1",
      "version": "1.0.0",
      "description": "MCP Server 1",
      "main": "server.js",
      "scripts": {
        "start": "node server.js"
      },
      "dependencies": {
        "@modelcontextprotocol/sdk": "^0.4.0",
        "express": "^4.18.0",
        "winston": "^3.10.0"
      }
    }
  server.js: |
    const express = require('express');
    const { Server } = require('@modelcontextprotocol/sdk/server/index.js');
    const { StdioServerTransport } = require('@modelcontextprotocol/sdk/server/stdio.js');
    const winston = require('winston');
    
    const logger = winston.createLogger({
      level: process.env.LOG_LEVEL || 'info',
      format: winston.format.json(),
      transports: [
        new winston.transports.Console()
      ]
    });
    
    const app = express();
    const port = process.env.MCP_SERVER_PORT || 3000;
    
    app.use(express.json());
    
    // Health check endpoints
    app.get('/health', (req, res) => {
      res.json({ status: 'healthy', timestamp: new Date().toISOString() });
    });
    
    app.get('/ready', (req, res) => {
      res.json({ status: 'ready', timestamp: new Date().toISOString() });
    });
    
    // MCP Server setup
    const server = new Server(
      {
        name: process.env.MCP_SERVER_NAME || 'mcp-server-1',
        version: '1.0.0'
      },
      {
        capabilities: {
          logging: {},
          prompts: {},
          resources: {},
          tools: {}
        }
      }
    );
    
    // Add your MCP handlers here
    server.setRequestHandler('initialize', async (request) => {
      logger.info('MCP Server initialized', { request });
      return {
        protocolVersion: '2024-11-05',
        capabilities: server.getCapabilities(),
        serverInfo: {
          name: server.name,
          version: server.version
        }
      };
    });
    
    app.listen(port, () => {
      logger.info(`MCP Server listening on port ${port}`);
    });
---
# MCP Server PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mcp-server-1-data
  namespace: mcp-servers
  labels:
    app: mcp-server
    instance: mcp-server-1
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: longhorn
---
# Ingress for MCP Server
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mcp-server-1
  namespace: mcp-servers
  labels:
    app: mcp-server
    instance: mcp-server-1
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /mcp-server-1(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: mcp-server-1
            port:
              number: 80
